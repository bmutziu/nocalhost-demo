apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: my-app
  namespace: demo
spec:
  components:
    - name: my-server
      type: webservice
      properties:
        image: ghcr.io/bmutziu/nocalhost-demo:master-8babdcd3-1657800680 # {"$imagepolicy": "demo:app-gitops"}
        port: 9080
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                name: dev-db-conn
                key: db_instance_address
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: dev-db-conn
                key: db_instance_username
      traits:
        - type: nocalhost
          properties:
            port: 9080
            gitUrl: https://github.com/bmutziu/nocalhost-demo.git
            image: ghcr.io/nocalhost/dev-container/golang:latest@sha256:e379e32a2921d2e4f80c5d32a1965ce4d52bb15d03a0a8a7b43eb6a413e55b44
            sync:
              type: sendReceive
            debug:
              remoteDebugPort: 9009
        - type: gateway
          properties:
            domain: dev.bmutziu.me
            http:
              /: 9080
  policies:
    - name: multi-env-policy
      type: env-binding
      properties:
        envs:
          - name: dev
            placement:
              clusterSelector:
                name: cluster-dev
            selector:
              components:
                - my-server
          - name: prod
            placement:
              clusterSelector:
                name: cluster-prod
            patch:
              components:
                - name: my-server
                  type: webservice
                  traits:
                    - type: gateway
                      properties:
                        domain: prod.bmutziu.me
  workflow:
    steps:
      - name: read-dev-secret
        type: read-object
        outputs:
          - name: dev-secret-value
            valueFrom: output.value.data
        properties:
          apiVersion: v1
          kind: Secret
          name: dev-db-conn
          namespace: demo
      - name: apply-dev-secret
        type: apply-object
        inputs:
          - from: dev-secret-value
            parameterKey: value.data
        properties:
          value:
            apiVersion: v1
            kind: Secret
            metadata:
              name: dev-db-conn
              namespace: dev
          cluster: cluster-dev
      - name: deploy-dev
        type: deploy2env
        properties:
          policy: multi-env-policy
          env: dev
      - name: dev-notification
        type: webhook-notification
        properties:
          slack:
            url:
              secretRef:
                name: my-secret
                key: slack
            message:
              text: "Successfully applied the app in dev cluster"
      - name: manual-approval
        type: suspend
      - name: read-prod-secret
        type: read-object
        outputs:
          - name: prod-secret-value
            valueFrom: output.value.data
        properties:
          apiVersion: v1
          kind: Secret
          name: prod-db-conn
          namespace: demo
      - name: apply-prod-secret
        type: apply-object
        inputs:
          - from: prod-secret-value
            parameterKey: value.data
        properties:
          value:
            apiVersion: v1
            kind: Secret
            metadata:
              name: prod-db-conn
              namespace: prod
          cluster: cluster-prod
      - name: deploy-prod
        type: deploy2env
        properties:
          policy: multi-env-policy
          env: prod
      - name: prod-notification
        type: webhook-notification
        properties:
          slack:
            url:
              secretRef:
                name: my-secret
                key: slack
            message:
              text: "Successfully applied the app in prod cluster"
